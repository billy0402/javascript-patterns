/*
 * 單體模式 (Singleton):
 * 建立唯一一個「class」實體。
 * 可以用建構式來取代 class，以保持類似 Java 的語法。
 * 除此之外，技術上 JavaScript 中所有物件都是 singleton。
 * 還有，有時候當程式員說 singleton，意思是指模組模式創造的物件。
 *
 * 工廠模式 (Factory):
 * 用字串指定型別並建立物件的一種方法。
 *
 * 迭代器模式 (Iterator):
 * 提供一組 API 來走訪或者巡覽一個複雜的自訂資料結構。
 *
 * 裝飾者模式 (Decorator):
 * 在執行期間調整物件，可由預先定義的 decorator 物件中，選擇功能來加入物件。
 *
 * 策略模式 (Strategy):
 * 從一整套可用的演算法中選擇最適合的 strategy 來處理特定任務，且同時可保持相同的介面。
 *
 * 外觀模式 (Facade):
 * 將普通的(或是設計得很差的)一群方法包裝成一組更方便的 API。
 *
 * 代理模式 (Proxy):
 * 包裝一個物件以控制存取權，藉由將操作組合在一起，或是只有在真正需要時才執行，來達成避免昂貴運算的目標。
 *
 * 中介者模式 (Mediator):
 * 促進降低耦合性，方法是讓你的物件不直接和其他物件「對話」，而是統一透過一個 mediator 物件溝通。
 *
 * 觀察者模式 (Observer):
 * 降低耦合性，方法是建立「可觀察物件」，它可以在有趣的事件發生時，通知其他 observers 物件。
 * 也稱為「訂閱者/出版者」(subscriber/publisher) 或者 「自訂事件」(custom event)。
 */
